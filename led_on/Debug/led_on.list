
led_on.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000014c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800034c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800034c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000100  00000000  00000000  00010376  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000080  00000000  00000000  00010476  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  000104f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f02  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000410  00000000  00000000  00011472  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b04  00000000  00000000  00011882  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015386  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00015404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	0800032c 	.word	0x0800032c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	0800032c 	.word	0x0800032c

08000238 <main>:
#endif

#include <stdint.h>

int main(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
	uint32_t * pClkCtrolReg = (uint32_t *)0x40023830;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <main+0x4c>)
 8000240:	60fb      	str	r3, [r7, #12]
	uint32_t * pPortBModeReg = (uint32_t *)0x40020400;
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <main+0x50>)
 8000244:	60bb      	str	r3, [r7, #8]
	uint32_t * pPortBOutReg = (uint32_t *)0x40020414;
 8000246:	4b11      	ldr	r3, [pc, #68]	; (800028c <main+0x54>)
 8000248:	607b      	str	r3, [r7, #4]

	// 1. enable the clock for GPIOB peripheral in the AHB1ENR
	uint32_t temp = *pClkCtrolReg; // read register status
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	603b      	str	r3, [r7, #0]
	temp = temp | 0x02; // modify the bit needed
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	603b      	str	r3, [r7, #0]
	*pClkCtrolReg = temp; // save the register new value
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	601a      	str	r2, [r3, #0]

	//alternative 2 short C notation
	// *pClkCtrolReg |= 0x08;

	// 2. configure the mode of the IO pin as output
	*pPortBModeReg &= 0xFFFF3FFF; // clear the 14 and 15 bit positions (CLEAR)
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	601a      	str	r2, [r3, #0]
	*pPortBModeReg |= 0x4000; // make 14 bit position as 1 (SET)
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	601a      	str	r2, [r3, #0]

	// 3. SET the 7 bit of the output data register to make I/O pin 7 as HIGH.
	*pPortBOutReg |= 0x80;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	601a      	str	r2, [r3, #0]


	while(1);
 8000282:	e7fe      	b.n	8000282 <main+0x4a>
 8000284:	40023830 	.word	0x40023830
 8000288:	40020400 	.word	0x40020400
 800028c:	40020414 	.word	0x40020414

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490e      	ldr	r1, [pc, #56]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0b      	ldr	r4, [pc, #44]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ba:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ffb9 	bl	8000238 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800034c 	.word	0x0800034c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	4e0d      	ldr	r6, [pc, #52]	; (800031c <__libc_init_array+0x38>)
 80002e8:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ea:	1ba4      	subs	r4, r4, r6
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	2500      	movs	r5, #0
 80002f0:	42a5      	cmp	r5, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	4e0b      	ldr	r6, [pc, #44]	; (8000324 <__libc_init_array+0x40>)
 80002f6:	4c0c      	ldr	r4, [pc, #48]	; (8000328 <__libc_init_array+0x44>)
 80002f8:	f000 f818 	bl	800032c <_init>
 80002fc:	1ba4      	subs	r4, r4, r6
 80002fe:	10a4      	asrs	r4, r4, #2
 8000300:	2500      	movs	r5, #0
 8000302:	42a5      	cmp	r5, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030c:	4798      	blx	r3
 800030e:	3501      	adds	r5, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000316:	4798      	blx	r3
 8000318:	3501      	adds	r5, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
